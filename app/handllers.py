import logging
from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.fsm.state import StatesGroup,State
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import random
from app.dopolnenia.text import words, options_main


import app.keyboards as kb
import app.bd.requests as rq


router= Router()

user_message_ids = {}
class Reg(StatesGroup):
    name = State()
    classes = State()


class TestStates(StatesGroup):
    answering_question = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
    finished = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞


@router.message(CommandStart())
async def cmd_start(message: Message):
    await rq.set_user(message.from_user.id)
    await message. answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} ',)
    await message.answer(' –Ø ‚Äî –†–µ–ø–µ—Ç–∏—à–∫–∞, —Ç–≤–æ–π –≤–µ—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –∑–Ω–∞–Ω–∏–π!'
                         ' üåü –ú–æ—è –º–∏—Å—Å–∏—è ‚Äî –∑–∞–º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–±—è —É—á–∏—Ç—å—Å—è –∏ –¥–µ–ª–∞—Ç—å '
                         '–ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–π. –ì–æ—Ç–æ–≤ –ª–∏ —Ç—ã –Ω–∞—á–∞—Ç—å?',
                         reply_markup=kb.main)



@router. callback_query(F. data == 'YES')
async def YES(callback: CallbackQuery):
    await callback.message.answer('–ó–¥–æ—Ä–æ–≤–æ, —á—Ç–æ —Ç—ã —Ä–µ—à–∏–ª –Ω–∞—á–∞—Ç—å —É—á–∏—Ç—å—Å—è!'
                                  ' üéâ –î–∞–≤–∞–π —è –∑–∞–¥–∞–º —Ç–µ–±–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤,'
                                  ' —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –Ω–∞—à—É –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–¥–æ–±–Ω–æ–π'
                                  ' –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π. –î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –Ω–∞–ø–∏—à–∏ –∫–æ–º–º–∞–Ω–¥—É "/reg"')
@router. callback_query(F. data == 'NO')
async def NO(callback: CallbackQuery):
    await callback.message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —É—á–∏—Ç—å—Å—è –ø–æ—Ä–æ–π –±—ã–≤–∞–µ—Ç –Ω–µ–ø—Ä–æ—Å—Ç–æ –∏ —Å–∫—É—á–Ω–æ. üòÖ '
                         '–ù–æ –ø–æ–¥—É–º–∞–π, –∫–∞–∫ –º–Ω–æ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ø–µ—Ä–µ–¥ —Ç–æ–±–æ–π –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π '
                         '—Å–¥–∞—á–∏ —ç–∫–∑–∞–º–µ–Ω–æ–≤! üéì–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ '
                         '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ –∏ –ª–µ–≥—á–µ. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å –∫–ª–∏–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ‚ù§Ô∏è')


@router.message(Command('reg'))
async def reg_one(message: Message, state: FSMContext):
    await state.set_state(Reg.name)
    await message.answer('–í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è')

@router.message(Reg.name)
async def reg_two(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Reg.classes)
    await rq.update_name(message.from_user.id, message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Å–µ–π—á–∞—Å –æ–±—É—á–∞–µ—Ç–µ—Å—å. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ: 9, 10 –∏–ª–∏ 11. –ï—Å–ª–∏ —Ç–≤–æ–π –∫–ª–∞—Å—Å –Ω–∏–∂–µ, –≤—ã–±–µ—Ä–∏—Ç–µ 9.",reply_markup=kb.get_classes)

@router.message(Reg.classes, F.text.in_(["9", "10", "11"]))
async def register_class(message: Message, state: FSMContext):
    await state.update_data(classes=message.text)
    await rq.update_grade(message.from_user.id, message.text)
    data = await state.get_data()

    await message.answer(f'–°–ø–∞—Å–∏–±–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n –ò–º—è: {data["name"]}\n–ö–ª–∞—Å—Å: {data["classes"]} \n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –Ω–∞–ø–∏—à–∏ –∫–æ–º–º–∞–Ω–¥—É "/education"')
    await state.clear()

async def send_or_edit_message(bot, user_id, user_message_id, text, reply_markup):
    if user_message_id:
        await bot.edit_message_text(
            chat_id=user_id,
            message_id=user_message_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    else:
        sent_message = await bot.send_message(
            user_id,
            text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        user_message_ids[user_id] = sent_message.message_id


@router.message(Command("education"))
async def cmd_education(message: Message):
    user_id = message.from_user.id
    formatted_message = """<b>üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å –±–æ—Ç–æ–º</b>

–£–¥–∞—á–∏ –≤ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ!"""

    sent_message = await message.bot.send_message(
        chat_id=user_id,
        text=formatted_message,
        reply_markup=await kb.main_menu(),
        parse_mode=ParseMode.HTML
    )

    user_message_ids[user_id] = sent_message.message_id

    await message.delete()

from typing import List, Tuple

# –£—Ç–∏–ª–∏—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
async def send_error_message(message: Message, state: FSMContext, text: str):
    await message.edit_text(text)
    await state.clear()

# –£—Ç–∏–ª–∏—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
async def send_result_message(callback: CallbackQuery, state: FSMContext, result_message: str, category: str):
    await send_or_edit_message(callback.message.bot, callback.from_user.id,
                               user_message_ids.get(callback.from_user.id),
                               result_message, await kb.button_categories(category))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@router.callback_query(F.data.startswith('category_'))
async def category(callback: CallbackQuery):
    await callback.answer()
    category_name = callback.data.split('_')[1]
    text = f"{options_main.get(category_name)}\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {await rq.get_user_mistake_count(callback.from_user.id, category_name)}"

    await send_or_edit_message(callback.message.bot, callback.from_user.id, user_message_ids.get(callback.from_user.id), text, await kb.button_categories(category_name))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.callback_query(F.data == 'go_main')
async def go_main(callback: CallbackQuery):
    await send_or_edit_message(callback.message.bot, callback.from_user.id, user_message_ids.get(callback.from_user.id), "‚úçÔ∏è <b>–ï–≥—ç —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫</b>", await kb.main_menu())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Ç–µ—Å—Ç–∞
@router.callback_query(F.data.startswith('start_'))
async def start_test(callback: CallbackQuery, state: FSMContext):
    category = callback.data.split('_')[1]
    words1, words_dop = words.get(category, ([], []))
    await state.update_data(
        category=category,
        used_words=[],
        current_pair=[],
        words=words1,
        words_dop=words_dop
    )

    await state.set_state(TestStates.answering_question)

    await send_next_question(callback.message, state)

@router.callback_query(F.data.startswith('error_'))
async def start_error_correction(callback: CallbackQuery, state: FSMContext):
    category = callback.data.split('_')[1]
    errors = await rq.get_user_mistakes(callback.from_user.id, category)

    if not errors:
        await callback.message.edit_text(
            "üëç –£ –≤–∞—Å –Ω–µ—Ç –æ—à–∏–±–æ–∫ –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"close_{category}")
                ]]
            )
        )
        return

    words_error = [error.get('words', []) for error in errors]
    words_dop_error = [error.get('words_dop', []) for error in errors]
    await state.update_data(
        category=category,
        used_words=[],
        current_pair=[],
        words=words_error,
        words_dop=words_dop_error,
        is_error_correction=True
    )

    await state.set_state(TestStates.answering_question)
    await send_next_question(callback.message, state)

async def send_next_question(message: Message, state: FSMContext, result_message: str = ''):
    data = await state.get_data()
    if not data:
        await send_or_edit_message(message.bot, message.from_user.id, user_message_ids.get(message.from_user.id),
                                    "‚è≥ –í–∞—à–∞ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                                    await kb.main_menu())
        await state.clear()
        return

    category_name = data.get('category')

    if not data.get('words') or not data.get('words_dop'):
        finish_message = "üí´ –ü—Ä–æ—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" if data.get('is_error_correction') else "‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –≤—Å–µ —Å–ª–æ–≤–∞ –ø—Ä–æ–π–¥–µ–Ω—ã!"
        text = f"{options_main.get(category_name, '')}\n\n{finish_message}"
        await message.edit_text(text, reply_markup=await kb.button_categories(category_name))
        await state.clear()
        return

    words, words_dop = random.choice(list(zip(data['words'], data['words_dop'])))

    data['current_pair'] = (words, words_dop)

    answer_buttons = [
        InlineKeyboardButton(text=word, callback_data="correct" if word == words else "wrong")
        for word in random.sample([words, words_dop], 2)
    ]
    answer_buttons.append(InlineKeyboardButton(text="üîô –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"close_{data['category']}"))

    keyboard = InlineKeyboardMarkup(inline_keyboard=[[button] for button in answer_buttons])
    result_message = f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: {result_message}" if not result_message else result_message

    await state.update_data(data)
    await message.edit_text(result_message, reply_markup=keyboard)

@router.callback_query(F.data.in_(['correct', 'wrong']))
async def handle_answer(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if not data:
        await send_or_edit_message(callback.message.bot, callback.from_user.id,
                                   user_message_ids.get(callback.from_user.id),
                                   "–í–∞—à–∞ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                                   await kb.main_menu())
        await state.clear()
        return

    correct_word, wrong_word = data.get('current_pair', (None, None))

    if callback.data == "correct":
        if data.get('is_error_correction'):
            data['words'].remove(correct_word)
            data['words_dop'].remove(wrong_word)
            await rq.remove_user_mistake(callback.from_user.id, data['category'], correct_word)
        result_message = "‚úÖ –í–µ—Ä–Ω–æ!"
    else:
        result_message = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_word}"
        if not data.get('is_error_correction'):
            await rq.save_user_mistake(callback.from_user.id, data['category'], wrong_word=wrong_word, correct_word=correct_word)

    await send_next_question(callback.message, state, result_message)

# –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞
@router.callback_query(F.data.startswith('close_'))
async def close_test(callback: CallbackQuery, state: FSMContext):
    category_name = callback.data.split('_')[1]
    text = options_main.get(category_name, "")
    user_id = callback.from_user.id
    mistake_count = await rq.get_user_mistake_count(user_id, category_name)
    text = f"{text}\n\nüìö –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {mistake_count}"

    await state.clear()
    await callback.message.edit_text(text=text, reply_markup=await kb.button_categories(category_name))
